# Set the public-facing port for the entire application
server.port=8080
spring.application.name=API-GATEWAY

# --- Eureka Client Configuration ---
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.instance.instance-id=${spring.application.name}:${server.port}
eureka.instance.hostname=localhost

# --- Enable Discovery-Client-based Routing ---
spring.cloud.gateway.discovery.locator.enabled=true

# --- HTTP Client Timeout ---
spring.cloud.gateway.httpclient.response-timeout=60000

# --- Route Definitions ---

# Route 1: KYC-SERVICE (Handles all UI and its own APIs)
spring.cloud.gateway.routes[0].id=kyc-service-route
spring.cloud.gateway.routes[0].uri=lb://KYC-SERVICE
# Note: The chatbot's data API is still here
spring.cloud.gateway.routes[0].predicates[0]=Path=/ui/**, /login, /logout, /dashboard, /admin/**, /customer/**, /api/applications/**, /api/chatbot/**, /css/**, /images/**

# Route 2: CUSTOMER-SERVICE (Handles its own internal and admin APIs)
spring.cloud.gateway.routes[1].id=customer-service-route
spring.cloud.gateway.routes[1].uri=lb://CUSTOMER-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/internal/customers/**, /api/admin/customers/**, /api/customers/**

# Route 3: ACCOUNT-SERVICE (Handles its own internal APIs)
spring.cloud.gateway.routes[2].id=account-service-route
spring.cloud.gateway.routes[2].uri=lb://ACCOUNT-SERVICE
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/internal/accounts/**

# Route 4: CHATBOT-FLASK-SERVICE (Proxy for the Python App)
spring.cloud.gateway.routes[3].id=chatbot-proxy-route
spring.cloud.gateway.routes[3].uri=http://localhost:5000
# This catches requests to /api/chatbot-proxy/**
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/chatbot-proxy/**
# This filter strips the /api/chatbot-proxy/ prefix. e.g., /api/chatbot-proxy/chat becomes /chat for Flask
spring.cloud.gateway.routes[3].filters[0]=RewritePath=/api/chatbot-proxy/(?<segment>.*), /$\{segment}